"""
Custom single-thread event handling
"""

import sys
import Queue
import events


## General asynchronous event facility ##########
__GenericEventList__ = Queue.Queue()

def pop_evt_queue(timeout=None):
    try:
        evt = __GenericEventList__.get(True, timeout)
    except Queue.Empty:
        return None
    try:
        __GenericEventList__.task_done()
    except:
        pass
    return evt


class genericAsynchEventType(object):
    def __init__(self):
        self.queue = __GenericEventList__
        self.function = None

    def Bind(self, pid, fctn):
        self.function = fctn


class genericAsynchEvent(object):
    def __init__(self, evt_t):
        self.etype = evt_t

    def Post(self, rcvr):
        self.etype.queue.put(self)

    def Handle(self):
        self.etype.function(self)
    
    def Skip(self):
        pass



## Specific events ##########

txtCmdEvent = genericAsynchEventType()

class txtEvent(genericAsynchEvent, events.Event):
    """
    Custom events
    """
    (OK, CANCEL, INFORMATION, WARNING, QUESTION, ERROR) = range(6)

    def __init__(self, string, ident=events.NOTICE, context=None, tpl=()):
        genericAsynchEvent.__init__(self, txtCmdEvent)
        events.Event.__init__(self, string, ident, context, tpl)
